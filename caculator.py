# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


# Will be updated soon
import math
import numpy
from matplotlib.pylab import plot, show, title
from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_Calculator(object):
    def __init__(self) -> None:
        super().__init__()
        Ui_Calculator.mainStrin = ''
        Ui_Calculator.status = True
        Ui_Calculator.statuscal = True
        Ui_Calculator.DorR = True
        Ui_Calculator.mode = ''
        Ui_Calculator.startv = 0
        Ui_Calculator.stopv = 0

    def setupUi(self, Calculator):
        Calculator.setObjectName("Calculator")
        Calculator.resize(470, 476)
        font = QtGui.QFont()
        font.setPointSize(10)
        Calculator.setFont(font)
        self.centralwidget = QtWidgets.QWidget(Calculator)
        self.centralwidget.setObjectName("centralwidget")
        self.layoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.layoutWidget.setGeometry(QtCore.QRect(20, 140, 322, 176))
        self.layoutWidget.setObjectName("layoutWidget")
        self.gridLayout = QtWidgets.QGridLayout(self.layoutWidget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")
        self.number1 = QtWidgets.QPushButton(self.layoutWidget)
        self.number1.setObjectName("number1")
        self.gridLayout.addWidget(self.number1, 0, 0, 1, 1)
        self.number3 = QtWidgets.QPushButton(self.layoutWidget)
        self.number3.setObjectName("number3")
        self.gridLayout.addWidget(self.number3, 0, 2, 1, 1)
        self.number8 = QtWidgets.QPushButton(self.layoutWidget)
        self.number8.setObjectName("number8")
        self.gridLayout.addWidget(self.number8, 3, 1, 1, 1)
        self.number4 = QtWidgets.QPushButton(self.layoutWidget)
        self.number4.setObjectName("number4")
        self.gridLayout.addWidget(self.number4, 2, 0, 1, 1)
        self.number5 = QtWidgets.QPushButton(self.layoutWidget)
        self.number5.setObjectName("number5")
        self.gridLayout.addWidget(self.number5, 2, 1, 1, 1)
        self.number7 = QtWidgets.QPushButton(self.layoutWidget)
        self.number7.setObjectName("number7")
        self.gridLayout.addWidget(self.number7, 3, 0, 1, 1)
        self.number6 = QtWidgets.QPushButton(self.layoutWidget)
        self.number6.setObjectName("number6")
        self.gridLayout.addWidget(self.number6, 2, 2, 1, 1)
        self.floatPoint = QtWidgets.QPushButton(self.layoutWidget)
        self.floatPoint.setObjectName("floatPoint")
        self.gridLayout.addWidget(self.floatPoint, 4, 0, 1, 1)
        self.number0 = QtWidgets.QPushButton(self.layoutWidget)
        self.number0.setObjectName("number0")
        self.gridLayout.addWidget(self.number0, 4, 1, 1, 1)
        self.negative = QtWidgets.QPushButton(self.layoutWidget)
        self.negative.setObjectName("negative")
        self.gridLayout.addWidget(self.negative, 4, 2, 1, 1)
        self.number9 = QtWidgets.QPushButton(self.layoutWidget)
        self.number9.setObjectName("number9")
        self.gridLayout.addWidget(self.number9, 3, 2, 1, 1)
        self.pi = QtWidgets.QPushButton(self.layoutWidget)
        self.pi.setObjectName("pi")
        self.gridLayout.addWidget(self.pi, 5, 0, 1, 1)
        self.reload = QtWidgets.QPushButton(self.layoutWidget)
        self.reload.setObjectName("reload")
        self.gridLayout.addWidget(self.reload, 5, 2, 1, 1)
        self.number2 = QtWidgets.QPushButton(self.layoutWidget)
        self.number2.setObjectName("number2")
        self.gridLayout.addWidget(self.number2, 0, 1, 1, 1)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.up = QtWidgets.QPushButton(self.layoutWidget)
        self.up.setObjectName("up")
        self.horizontalLayout_3.addWidget(self.up)
        self.down = QtWidgets.QPushButton(self.layoutWidget)
        self.down.setObjectName("down")
        self.horizontalLayout_3.addWidget(self.down)
        self.gridLayout.addLayout(self.horizontalLayout_3, 5, 1, 1, 1)
        self.layoutWidget1 = QtWidgets.QWidget(self.centralwidget)
        self.layoutWidget1.setGeometry(QtCore.QRect(20, 110, 321, 22))
        self.layoutWidget1.setObjectName("layoutWidget1")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.layoutWidget1)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.radioButtonAdvance = QtWidgets.QRadioButton(self.layoutWidget1)
        self.radioButtonAdvance.setObjectName("radioButtonAdvance")
        self.horizontalLayout.addWidget(self.radioButtonAdvance)
        self.radioButtonSimple = QtWidgets.QRadioButton(self.layoutWidget1)
        self.radioButtonSimple.setCheckable(True)
        self.radioButtonSimple.setChecked(True)
        self.radioButtonSimple.setObjectName("radioButtonSimple")
        self.horizontalLayout.addWidget(self.radioButtonSimple)
        self.layoutWidget2 = QtWidgets.QWidget(self.centralwidget)
        self.layoutWidget2.setGeometry(QtCore.QRect(360, 30, 93, 348))
        self.layoutWidget2.setObjectName("layoutWidget2")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.layoutWidget2)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.pushButtonResult = QtWidgets.QPushButton(self.layoutWidget2)
        self.pushButtonResult.setObjectName("pushButtonResult")
        self.verticalLayout_2.addWidget(self.pushButtonResult)
        self.hit = QtWidgets.QPushButton(self.layoutWidget2)
        self.hit.setObjectName("hit")
        self.verticalLayout_2.addWidget(self.hit)
        self.division = QtWidgets.QPushButton(self.layoutWidget2)
        self.division.setObjectName("division")
        self.verticalLayout_2.addWidget(self.division)
        self.total = QtWidgets.QPushButton(self.layoutWidget2)
        self.total.setObjectName("total")
        self.verticalLayout_2.addWidget(self.total)
        self.submission = QtWidgets.QPushButton(self.layoutWidget2)
        self.submission.setObjectName("submission")
        self.verticalLayout_2.addWidget(self.submission)
        self.log = QtWidgets.QPushButton(self.layoutWidget2)
        self.log.setObjectName("log")
        self.verticalLayout_2.addWidget(self.log)
        self.sqrt = QtWidgets.QPushButton(self.layoutWidget2)
        self.sqrt.setObjectName("sqrt")
        self.verticalLayout_2.addWidget(self.sqrt)
        self.exp = QtWidgets.QPushButton(self.layoutWidget2)
        self.exp.setObjectName("exp")
        self.verticalLayout_2.addWidget(self.exp)
        self.sin = QtWidgets.QPushButton(self.layoutWidget2)
        self.sin.setObjectName("sin")
        self.verticalLayout_2.addWidget(self.sin)
        self.cos = QtWidgets.QPushButton(self.layoutWidget2)
        self.cos.setObjectName("cos")
        self.verticalLayout_2.addWidget(self.cos)
        self.degree = QtWidgets.QRadioButton(self.layoutWidget2)
        self.degree.setObjectName("degree")
        self.degree.setChecked(True)
        self.verticalLayout_2.addWidget(self.degree)
        self.radians = QtWidgets.QRadioButton(self.layoutWidget2)
        self.radians.setObjectName("radians")
        self.verticalLayout_2.addWidget(self.radians)
        self.layoutWidget3 = QtWidgets.QWidget(self.centralwidget)
        self.layoutWidget3.setGeometry(QtCore.QRect(20, 400, 321, 31))
        self.layoutWidget3.setObjectName("layoutWidget3")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.layoutWidget3)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.start = QtWidgets.QLineEdit(self.layoutWidget3)
        self.start.setObjectName("start")
        self.horizontalLayout_2.addWidget(self.start)
        self.pushButtonChart = QtWidgets.QPushButton(self.layoutWidget3)
        self.pushButtonChart.setObjectName("pushButtonChart")
        self.horizontalLayout_2.addWidget(self.pushButtonChart)
        self.stop = QtWidgets.QLineEdit(self.layoutWidget3)
        self.stop.setObjectName("stop")
        self.horizontalLayout_2.addWidget(self.stop)
        self.rsulte2 = QtWidgets.QTextBrowser(self.centralwidget)
        self.rsulte2.setGeometry(QtCore.QRect(20, 330, 321, 61))
        self.rsulte2.setObjectName("rsulte2")
        self.result1 = QtWidgets.QTextBrowser(self.centralwidget)
        self.result1.setGeometry(QtCore.QRect(20, 10, 321, 91))
        self.result1.setObjectName("result1")
        Calculator.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(Calculator)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 470, 21))
        self.menubar.setObjectName("menubar")
        Calculator.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(Calculator)
        self.statusbar.setObjectName("statusbar")
        Calculator.setStatusBar(self.statusbar)

        self.retranslateUi(Calculator)
        self.radioButtonSimple.clicked.connect(self.pushButtonChart.hide)
        self.radioButtonSimple.clicked.connect(self.sin.hide)
        self.radioButtonSimple.clicked.connect(self.cos.hide)
        self.radioButtonSimple.clicked.connect(self.log.hide)
        self.radioButtonSimple.clicked.connect(self.exp.hide)
        self.radioButtonAdvance.clicked.connect(self.pushButtonChart.show)
        self.radioButtonAdvance.clicked.connect(self.sin.show)
        self.radioButtonAdvance.clicked.connect(self.cos.show)
        self.radioButtonAdvance.clicked.connect(self.log.show)
        self.radioButtonAdvance.clicked.connect(self.exp.show)
        self.radioButtonAdvance.clicked.connect(self.rsulte2.show)
        self.radioButtonSimple.clicked.connect(self.rsulte2.hide)
        self.radioButtonSimple.clicked.connect(self.sqrt.hide)
        self.radioButtonSimple.clicked.connect(self.degree.hide)
        self.radioButtonSimple.clicked.connect(self.radians.hide)
        self.radioButtonAdvance.clicked.connect(self.sqrt.show)
        self.radioButtonAdvance.clicked.connect(self.degree.show)
        self.radioButtonAdvance.clicked.connect(self.radians.show)
        self.number1.clicked.connect(self.numberone)
        self.number2.clicked.connect(self.numbertwo)
        self.number3.clicked.connect(self.numberthree)
        self.number4.clicked.connect(self.numberfour)
        self.number5.clicked.connect(self.numberfive)
        self.number6.clicked.connect(self.numbersix)
        self.number7.clicked.connect(self.numberseven)
        self.number8.clicked.connect(self.numbereight)
        self.number9.clicked.connect(self.numbernine)
        self.floatPoint.clicked.connect(self.floatpoint)
        self.number0.clicked.connect(self.numberzero)
        self.negative.clicked.connect(self.numberneg)
        self.pi.clicked.connect(self.numberpi)
        self.reload.clicked.connect(self.reloadf)
        self.pushButtonResult.clicked.connect(self.resultp)
        self.hit.clicked.connect(self.hitp)
        self.division.clicked.connect(self.divisionp)
        self.total.clicked.connect(self.totalp)
        self.submission.clicked.connect(self.submissionp)
        self.log.clicked.connect(self.logp)
        self.sqrt.clicked.connect(self.sqrtp)
        self.exp.clicked.connect(self.expp)
        self.sin.clicked.connect(self.sinp)
        self.cos.clicked.connect(self.cosp)
        self.degree.clicked.connect(self.degreep)
        self.radians.clicked.connect(self.radiansp)
        self.radioButtonAdvance.clicked.connect(self.start.show)
        self.radioButtonAdvance.clicked.connect(self.stop.show)
        self.radioButtonSimple.clicked.connect(self.start.hide)
        self.radioButtonSimple.clicked.connect(self.stop.hide)
        self.radioButtonAdvance.clicked.connect(self.rsulte2.show)
        self.radioButtonAdvance.clicked.connect(self.up.show)
        self.radioButtonSimple.clicked.connect(self.up.hide)
        self.radioButtonSimple.clicked.connect(self.down.hide)
        self.radioButtonAdvance.clicked.connect(self.down.show)
        self.radioButtonAdvance.clicked.connect(self.pushButtonChart.show)
        self.up.clicked.connect(self.StatusUp)
        self.down.clicked.connect(self.StatusDown)
        self.radioButtonSimple.clicked.connect(self.statusSimple)
        self.radioButtonAdvance.clicked.connect(self.statusAdvance)
        if Ui_Calculator.status:
            self.up.hide()
            self.down.hide()
            self.degree.hide()
            self.radians.hide()
            self.rsulte2.hide()
            self.pushButtonChart.hide()
            self.start.hide()
            self.stop.hide()
            self.cos.hide()
            self.sin.hide()
            self.sqrt.hide()
            self.exp.hide()
            self.log.hide()
        self.pushButtonChart.clicked.connect(self.chartp)

        QtCore.QMetaObject.connectSlotsByName(Calculator)

    def psin(self, start, stop):
        listy = []
        for x in numpy.arange(start, stop, 0.001):
            listy.append(math.sin(x))
        plot(numpy.arange(start, stop, 0.001), listy, '-r')
        title('Sin (x) with Radians')
        show()
        app.processEvents()

    def pcos(self, start, stop):
        listy = []
        for x in numpy.arange(start, stop, 0.001):
            listy.append(math.cos(x))
        plot(numpy.arange(start, stop, 0.001), listy, '-r')
        title('Cos (x) with Radians')
        show()
        app.processEvents()

    def plog(self, start, stop):
        listy = []
        for x in numpy.arange(start, stop, 0.001):
            listy.append(numpy.log(x))
        plot(numpy.arange(start, stop, 0.001), listy, '-r')
        title('The natural logarithm')
        show()
        app.processEvents()

    def pexp(self, start, stop):
        listy = []
        for x in numpy.arange(start, stop, 0.001):
            listy.append(numpy.exp(x))
        plot(numpy.arange(start, stop, 0.001), listy, '-r')
        title('The 2**x')
        show()
        app.processEvents()

    def psqrt(self, start, stop):
        listy = []
        for x in numpy.arange(start, stop, 0.001):
            listy.append(numpy.sqrt(x))
        plot(numpy.arange(start, stop, 0.001), listy, '-r')
        title('The Sqrt')
        show()
        app.processEvents()

    def chartp(self):
        if not Ui_Calculator.status:
            try:
                start = float(self.start.text())
                stop = float(self.stop.text())
                if Ui_Calculator.mode == 's':
                    self.psin(start, stop)
                elif Ui_Calculator.mode == 'c':
                    self.pcos(start, stop)
                elif Ui_Calculator.mode == 'sq':
                    self.psqrt(start, stop)
                elif Ui_Calculator.mode == 'e':
                    self.pexp(start, stop)
                elif Ui_Calculator.mode == 'l':
                    self.plog(start, stop)
                else:
                    print('enter a Function')
            except Exception:
                print('please enter a number')
        else:
            print('Not suport !!!')

    def expp(self):
        if not Ui_Calculator.mode:
            Ui_Calculator.mainStrin = "Exp " + Ui_Calculator.mainStrin
            Ui_Calculator.mode = 'e'
        if Ui_Calculator.status:
            self.result1.setText(Ui_Calculator.mainStrin)
        else:
            self.rsulte2.setText("Exp")
            Ui_Calculator.mode = 'e'

    def sqrtp(self):
        if not Ui_Calculator.mode:
            Ui_Calculator.mainStrin = "Sqrt " + Ui_Calculator.mainStrin
            Ui_Calculator.mode = 'sq'
        if Ui_Calculator.status:
            self.result1.setText(Ui_Calculator.mainStrin)
        else:
            self.rsulte2.setText("Sqrt")
            Ui_Calculator.mode = 'sq'

    def logp(self):
        if not Ui_Calculator.mode:
            Ui_Calculator.mainStrin = "Log " + Ui_Calculator.mainStrin
            Ui_Calculator.mode = 'l'
        if Ui_Calculator.status:
            self.result1.setText(Ui_Calculator.mainStrin)
        else:
            self.rsulte2.setText("Log")
            Ui_Calculator.mode = 'l'

        app.processEvents()

    def degreep(self):
        Ui_Calculator.DorR = True

    def radiansp(self):
        Ui_Calculator.DorR = False

    def sinp(self):
        if not Ui_Calculator.mode:
            Ui_Calculator.mainStrin = "Sin " + Ui_Calculator.mainStrin
            Ui_Calculator.mode = 's'
        if Ui_Calculator.status:
            self.result1.setText(Ui_Calculator.mainStrin)
        else:
            self.rsulte2.setText("Sin")
            Ui_Calculator.mode = 's'

        app.processEvents()

    def cosp(self):
        if not Ui_Calculator.mode:
            Ui_Calculator.mainStrin = "Cos " + Ui_Calculator.mainStrin
            Ui_Calculator.mode = 'c'
        if Ui_Calculator.status:
            self.result1.setText(Ui_Calculator.mainStrin)
        else:
            self.rsulte2.setText("Cos")
            Ui_Calculator.mode = 'c'
        app.processEvents()

    def statusSimple(self):
        self.result1.clear()
        self.rsulte2.clear()
        self.start.clear()
        self.stop.clear()
        Ui_Calculator.mainStrin = ''
        Ui_Calculator.statuscal = True
        Ui_Calculator.mode = ''
        app.processEvents()

    def statusAdvance(self):
        self.rsulte2.clear()
        self.result1.clear()
        self.start.clear()
        self.stop.clear()
        Ui_Calculator.mainStrin = ''
        Ui_Calculator.statuscal = False
        Ui_Calculator.mode = ''

        app.processEvents()

    def StatusUp(self):
        self.rsulte2.clear()
        self.start.clear()
        self.stop.clear()
        Ui_Calculator.mainStrin = ''
        Ui_Calculator.status = True
        app.processEvents()

    def StatusDown(self):
        self.result1.clear()
        self.start.clear()
        self.stop.clear()
        Ui_Calculator.mainStrin = ''
        Ui_Calculator.status = False
        app.processEvents()

    def numberone(self):
        Ui_Calculator.mainStrin += '1'
        if Ui_Calculator.status:
            self.result1.setText(Ui_Calculator.mainStrin)

        app.processEvents()

    def numbertwo(self):
        Ui_Calculator.mainStrin += '2'
        if Ui_Calculator.status:
            self.result1.setText(Ui_Calculator.mainStrin)
        app.processEvents()

    def numberthree(self):
        Ui_Calculator.mainStrin += '3'
        if Ui_Calculator.status:
            self.result1.setText(Ui_Calculator.mainStrin)
        app.processEvents()

    def numberfour(self):
        Ui_Calculator.mainStrin += '4'
        if Ui_Calculator.status:
            self.result1.setText(Ui_Calculator.mainStrin)
        app.processEvents()

    def numberfive(self):
        Ui_Calculator.mainStrin += '5'
        if Ui_Calculator.status:
            self.result1.setText(Ui_Calculator.mainStrin)
        app.processEvents()

    def numbersix(self):
        Ui_Calculator.mainStrin += '6'
        if Ui_Calculator.status:
            self.result1.setText(Ui_Calculator.mainStrin)
        app.processEvents()

    def numberseven(self):
        Ui_Calculator.mainStrin += '7'
        if Ui_Calculator.status:
            self.result1.setText(Ui_Calculator.mainStrin)
        app.processEvents()

    def numbereight(self):
        Ui_Calculator.mainStrin += '8'
        if Ui_Calculator.status:
            self.result1.setText(Ui_Calculator.mainStrin)
        app.processEvents()

    def numbernine(self):
        Ui_Calculator.mainStrin += '9'
        if Ui_Calculator.status:
            self.result1.setText(Ui_Calculator.mainStrin)
        app.processEvents()

    def numberzero(self):
        Ui_Calculator.mainStrin += '0'
        if Ui_Calculator.status:
            self.result1.setText(Ui_Calculator.mainStrin)
        app.processEvents()

    def floatpoint(self):
        Ui_Calculator.mainStrin += '.'
        if Ui_Calculator.status:
            self.result1.setText(Ui_Calculator.mainStrin)
        app.processEvents()

    def numberpi(self):
        Ui_Calculator.mainStrin += 'pi'
        if Ui_Calculator.status:
            self.result1.setText(Ui_Calculator.mainStrin)
        app.processEvents()\


    def numberneg(self):
        Ui_Calculator.mainStrin += '-'
        if Ui_Calculator.status:
            self.result1.setText(Ui_Calculator.mainStrin)
        app.processEvents()

    def hitp(self):
        Ui_Calculator.mainStrin += ' * '
        if Ui_Calculator.status:
            self.result1.setText(Ui_Calculator.mainStrin)
        app.processEvents()

    def divisionp(self):
        Ui_Calculator.mainStrin += ' / '
        if Ui_Calculator.status:
            self.result1.setText(Ui_Calculator.mainStrin)
        app.processEvents()

    def totalp(self):
        Ui_Calculator.mainStrin += ' + '
        if Ui_Calculator.status:
            self.result1.setText(Ui_Calculator.mainStrin)
        app.processEvents()

    def submissionp(self):
        Ui_Calculator.mainStrin += ' - '
        if Ui_Calculator.status:
            self.result1.setText(Ui_Calculator.mainStrin)
        app.processEvents()

    def reloadf(self):
        self.result1.clear()
        self.rsulte2.clear()
        self.start.clear()
        self.stop.clear()
        Ui_Calculator.mainStrin = ''
        Ui_Calculator.mode = ''
        app.processEvents()

    def simplCalculator(self, copystring):
        copystring = copystring.replace('pi', '3.1415926', 1000)

        return eval(copystring)

    def resultp(self):
        if Ui_Calculator.statuscal:
            copystring = Ui_Calculator.mainStrin
            copystring += f" = {round(self.simplCalculator(Ui_Calculator.mainStrin), 2)}"
            if Ui_Calculator.status:
                self.result1.setText(copystring)
                app.processEvents()
                Ui_Calculator.mainStrin = ''

        else:
            if Ui_Calculator.status:
                copystring = Ui_Calculator.mainStrin

                if Ui_Calculator.mode == 's':
                    Ui_Calculator.mainStrin = Ui_Calculator.mainStrin.replace(
                        'Sin ', '')
                    if Ui_Calculator.DorR:
                        degrees = self.simplCalculator(Ui_Calculator.mainStrin)
                        radians = degrees / 180.0 * math.pi
                        copystring += f" = {round(math.sin(radians), 2)}"
                    else:
                        radians = self.simplCalculator(Ui_Calculator.mainStrin)
                        copystring += f" = {round(math.sin(radians), 2)}"

                elif Ui_Calculator.mode == 'c':
                    Ui_Calculator.mainStrin = Ui_Calculator.mainStrin.replace(
                        'Cos ', '')
                    if Ui_Calculator.DorR:
                        degrees = self.simplCalculator(Ui_Calculator.mainStrin)
                        radians = degrees / 180.0 * math.pi
                        copystring += f" = {round(math.cos(radians), 2)}"
                    else:
                        radians = self.simplCalculator(Ui_Calculator.mainStrin)
                        copystring += f" = {round(math.cos(radians), 2)}"

                elif Ui_Calculator.mode == 'l':
                    Ui_Calculator.mainStrin = Ui_Calculator.mainStrin.replace(
                        'Log ', '')
                    copystring += f" = {round(numpy.log(self.simplCalculator(Ui_Calculator.mainStrin)),2)}"

                elif Ui_Calculator.mode == 'sq':
                    Ui_Calculator.mainStrin = Ui_Calculator.mainStrin.replace(
                        'Sqrt ', '')
                    copystring += f" = {round(numpy.sqrt(self.simplCalculator(Ui_Calculator.mainStrin)),2)}"

                elif Ui_Calculator.mode == 'e':
                    Ui_Calculator.mainStrin = Ui_Calculator.mainStrin.replace(
                        'Exp ', '')
                    copystring += f" = {round(numpy.exp(self.simplCalculator(Ui_Calculator.mainStrin)),2)}"

                self.result1.setText(copystring)
                app.processEvents()
                Ui_Calculator.mainStrin = ''
                Ui_Calculator.mode = ''
            else:
                print('not suport !!!')

    def retranslateUi(self, Calculator):
        _translate = QtCore.QCoreApplication.translate
        Calculator.setWindowTitle(_translate("Calculator", "Calculator"))
        self.number1.setText(_translate("Calculator", "1"))
        self.number3.setText(_translate("Calculator", "3"))
        self.number8.setText(_translate("Calculator", "8"))
        self.number4.setText(_translate("Calculator", "4"))
        self.number5.setText(_translate("Calculator", "5"))
        self.number7.setText(_translate("Calculator", "7"))
        self.number6.setText(_translate("Calculator", "6"))
        self.floatPoint.setText(_translate("Calculator", "."))
        self.number0.setText(_translate("Calculator", "0"))
        self.negative.setText(_translate("Calculator", "-"))
        self.number9.setText(_translate("Calculator", "9"))
        self.pi.setText(_translate("Calculator", "pi"))
        self.reload.setText(_translate("Calculator", "reload"))
        self.number2.setText(_translate("Calculator", "2"))
        self.up.setText(_translate("Calculator", "up"))
        self.down.setText(_translate("Calculator", "down"))
        self.radioButtonAdvance.setText(_translate("Calculator", "Advance"))
        self.radioButtonSimple.setText(_translate("Calculator", "Simple "))
        self.pushButtonResult.setText(_translate("Calculator", "="))
        self.hit.setText(_translate("Calculator", "*"))
        self.division.setText(_translate("Calculator", "/"))
        self.total.setText(_translate("Calculator", "+"))
        self.submission.setText(_translate("Calculator", "-"))
        self.log.setText(_translate("Calculator", "log"))
        self.sqrt.setText(_translate("Calculator", "sqrt"))
        self.exp.setText(_translate("Calculator", "exp"))
        self.sin.setText(_translate("Calculator", "sin"))
        self.cos.setText(_translate("Calculator", "cos"))
        self.degree.setText(_translate("Calculator", "degree"))
        self.radians.setText(_translate("Calculator", "radians"))
        self.pushButtonChart.setText(_translate("Calculator", "Plot"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Calculator = QtWidgets.QMainWindow()
    ui = Ui_Calculator()
    ui.setupUi(Calculator)
    Calculator.show()
    sys.exit(app.exec_())
